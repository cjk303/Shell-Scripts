from flask import Flask, request, render_template_string, send_file, jsonify
import re
import tempfile
import os
import subprocess
import platform

app = Flask(__name__)

IPV4_PATTERN = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
IPV6_PATTERN = r'\b(?:[A-Fa-f0-9]{1,4}:){1,7}[A-Fa-f0-9]{1,4}\b'

# Store IPs in memory for download
last_ip_list = []

HTML_TEMPLATE = '''
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>IP Address Extractor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script>
    async function checkHost(ip, button) {
        button.disabled = true;
        button.textContent = 'Checking...';
        try {
            const response = await fetch('/check_host?ip=' + ip);
            const data = await response.json();
            if (data.alive) {
                button.textContent = '‚úÖ Alive';
                button.classList.remove('btn-secondary');
                button.classList.add('btn-success');
            } else {
                button.textContent = '‚ùå Not Alive';
                button.classList.remove('btn-secondary');
                button.classList.add('btn-danger');
            }
        } catch (err) {
            button.textContent = 'Error';
            button.classList.remove('btn-secondary');
            button.classList.add('btn-warning');
        }
        button.disabled = false;
    }
    </script>
</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="card shadow-lg">
            <div class="card-body">
                <h2 class="card-title mb-4 text-center">üß† IP Address Extractor</h2>
                <form method="post" enctype="multipart/form-data" class="mb-4">
                    <div class="mb-3">
                        <label for="file" class="form-label">Upload a .txt file</label>
                        <input class="form-control" type="file" name="file" id="file" accept=".txt" required>
                    </div>
                    <div class="d-grid">
                        <button class="btn btn-primary" type="submit">Extract IP Addresses</button>
                    </div>
                </form>
                
                {% if error %}
                    <div class="alert alert-danger">{{ error }}</div>
                {% endif %}
                
                {% if ip_list %}
                    <h5 class="mb-3">‚úÖ Found {{ ip_list|length }} unique IP address{{ 'es' if ip_list|length > 1 else '' }}:</h5>
                    <ul class="list-group mb-3">
                        {% for ip in ip_list %}
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                {{ ip }}
                                <button class="btn btn-sm btn-secondary" onclick="checkHost('{{ ip }}', this)">Check</button>
                            </li>
                        {% endfor %}
                    </ul>
                    <form method="get" action="/download/txt" class="d-inline">
                        <button class="btn btn-success me-2">üì• Download as TXT</button>
                    </form>
                    <form method="get" action="/download/ansible" class="d-inline">
                        <button class="btn btn-secondary">‚öôÔ∏è Download as Ansible Hosts File</button>
                    </form>
                {% endif %}
            </div>
        </div>
    </div>
</body>
</html>
'''

def ping_host(ip):
    """Ping IP and return True if alive, False otherwise."""
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    # Ping once, timeout 2 seconds
    command = ['ping', param, '1', '-W', '2', ip] if platform.system().lower() != 'windows' else ['ping', param, '1', ip]
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.returncode == 0
    except Exception:
        return False

@app.route('/check_host')
def check_host():
    ip = request.args.get('ip', '')
    # Simple validation on IP format
    if not ip or not (re.match(IPV4_PATTERN, ip) or re.match(IPV6_PATTERN, ip)):
        return jsonify({'alive': False, 'error': 'Invalid IP'})
    alive = ping_host(ip)
    return jsonify({'alive': alive})

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    global last_ip_list
    ip_list = []
    error = None
    if request.method == 'POST':
        file = request.files.get('file')
        if file and file.filename.endswith('.txt'):
            content = file.read().decode('utf-8', errors='ignore')
            ipv4s = re.findall(IPV4_PATTERN, content)
            ipv6s = re.findall(IPV6_PATTERN, content)
            ip_list = sorted(set(ipv4s + ipv6s))
            last_ip_list = ip_list
        else:
            error = "Please upload a valid .txt file."
    return render_template_string(HTML_TEMPLATE, ip_list=last_ip_list, error=error)

@app.route('/download/txt')
def download_txt():
    global last_ip_list
    if not last_ip_list:
        return "No IPs available to download.", 400
    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix=".txt") as tmp:
        tmp.write('\n'.join(last_ip_list))
        tmp_path = tmp.name
    return send_file(tmp_path, as_attachment=True, download_name="extracted_ips.txt", mimetype='text/plain')

@app.route('/download/ansible')
def download_ansible():
    global last_ip_list
    if not last_ip_list:
        return "No IPs available to download.", 400
    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix=".ini") as tmp:
        tmp.write("[extracted]\n")
        for ip in last_ip_list:
            tmp.write(f"{ip}\n")
        tmp_path = tmp.name
    return send_file(tmp_path, as_attachment=True, download_name="ansible_hosts.ini", mimetype='text/plain')

if __name__ == '__main__':
    app.run(debug=True)
