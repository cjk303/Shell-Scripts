from flask import Flask, request, render_template_string, send_file, jsonify
import re
import tempfile
import os
import subprocess
import platform
import socket

app = Flask(__name__)

IPV4_PATTERN = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
IPV6_PATTERN = r'\b(?:[A-Fa-f0-9]{1,4}:){1,7}[A-Fa-f0-9]{1,4}\b'

last_ip_list = []
alive_hosts = []  # Store tuples of (ip, hostname or '')

HTML_TEMPLATE = '''
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>IP Address Extractor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script>
    async function checkHost(ip, button) {
        button.disabled = true;
        button.textContent = 'Checking...';
        try {
            const response = await fetch('/check_host?ip=' + ip);
            const data = await response.json();
            if (data.alive) {
                button.textContent = '‚úÖ Alive';
                button.classList.remove('btn-secondary');
                button.classList.add('btn-success');
                if(data.hostname) {
                    let span = document.getElementById('host-'+ip);
                    if(!span) {
                        span = document.createElement('span');
                        span.id = 'host-'+ip;
                        span.className = 'ms-2 text-muted';
                        button.parentNode.appendChild(span);
                    }
                    span.textContent = ' (' + data.hostname + ')';
                }
            } else {
                button.textContent = '‚ùå Not Alive';
                button.classList.remove('btn-secondary');
                button.classList.add('btn-danger');
            }
        } catch (err) {
            button.textContent = 'Error';
            button.classList.remove('btn-secondary');
            button.classList.add('btn-warning');
        }
        button.disabled = false;
    }

    async function checkAllHosts() {
        const listItems = document.querySelectorAll('li.list-group-item');
        const allButton = document.getElementById('checkAllBtn');
        allButton.disabled = true;
        allButton.textContent = 'Checking all...';

        for (const li of listItems) {
            const ip = li.dataset.ip;
            const btn = li.querySelector('button');
            if(btn) {
                await checkHost(ip, btn);
            }
        }

        document.getElementById('saveAliveSection').style.display = 'block';
        allButton.disabled = false;
        allButton.textContent = 'Check All Hosts';
    }

    document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById("playbookForm");
        if (form) {
            form.addEventListener("submit", async (e) => {
                e.preventDefault();
                const btn = form.querySelector("button");
                const outputBox = document.getElementById("playbookOutput");
                btn.disabled = true;
                btn.textContent = "Running...";
                outputBox.style.display = 'none';

                const formData = new FormData(form);
                const payload = Object.fromEntries(formData.entries());

                try {
                    const res = await fetch('/run_playbook', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const data = await res.json();
                    outputBox.textContent = data.output || JSON.stringify(data);
                    outputBox.style.display = 'block';
                } catch (err) {
                    alert("Error running playbook: " + err);
                }

                btn.disabled = false;
                btn.textContent = "üöÄ Run Ansible Playbook";
            });
        }
    });
    </script>
</head>
<body class="bg-light">
<div class="container py-5">
    <div class="card shadow-lg">
        <div class="card-body">
            <h2 class="card-title mb-4 text-center">üß† IP Address Extractor</h2>
            <form method="post" enctype="multipart/form-data" class="mb-4">
                <div class="mb-3">
                    <label for="file" class="form-label">Upload a .txt file</label>
                    <input class="form-control" type="file" name="file" id="file" accept=".txt" required>
                </div>
                <div class="d-grid">
                    <button class="btn btn-primary" type="submit">Extract IP Addresses</button>
                </div>
            </form>

            {% if error %}
                <div class="alert alert-danger">{{ error }}</div>
            {% endif %}

            {% if ip_list %}
                <h5 class="mb-3">‚úÖ Found {{ ip_list|length }} unique IP address{{ 'es' if ip_list|length > 1 else '' }}:</h5>
                <button id="checkAllBtn" class="btn btn-info mb-3" onclick="checkAllHosts()">Check All Hosts</button>
                <ul class="list-group mb-3">
                    {% for ip in ip_list %}
                        <li class="list-group-item d-flex justify-content-between align-items-center" data-ip="{{ ip }}">
                            {{ ip }}
                            <button class="btn btn-sm btn-secondary" onclick="checkHost('{{ ip }}', this)">Check</button>
                        </li>
                    {% endfor %}
                </ul>

                <form method="get" action="/download/txt" class="d-inline">
                    <button class="btn btn-success me-2">üì• Download as TXT</button>
                </form>
                <form method="get" action="/download/ansible" class="d-inline">
                    <button class="btn btn-secondary">‚öôÔ∏è Download as Ansible Hosts File</button>
                </form>

                <div id="saveAliveSection" style="display:none;" class="mt-4">
                    <h5>Download Alive Hosts:</h5>
                    <form method="get" action="/download/alive/txt" class="d-inline">
                        <button class="btn btn-success me-2">üì• Download Alive as TXT</button>
                    </form>
                    <form method="get" action="/download/alive/ansible" class="d-inline">
                        <button class="btn btn-secondary">‚öôÔ∏è Download Alive as Ansible Hosts File</button>
                    </form>
                </div>

                <h5 class="mt-4">Execute Playbook:</h5>
                <form id="playbookForm" class="row g-3">
                    <div class="col-md-4">
                        <input type="text" class="form-control" name="username" placeholder="SSH Username" required>
                    </div>
                    <div class="col-md-4">
                        <input type="password" class="form-control" name="password" placeholder="SSH Password" required>
                    </div>
                    <div class="col-md-4">
                        <input type="password" class="form-control" name="become_password" placeholder="Become Password" required>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" name="become_method" required>
                            <option value="sudo">sudo</option>
                            <option value="dzdo">dzdo</option>
                        </select>
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-danger">üöÄ Run Ansible Playbook</button>
                    </div>
                </form>
                <pre id="playbookOutput" class="mt-3 bg-dark text-white p-3 rounded" style="display:none;"></pre>
            {% endif %}
        </div>
    </div>
</div>
</body>
</html>
'''

# All route and helper function definitions follow (same as before) ...
# upload_file, download_txt, download_ansible, check_host, download_alive_txt, download_alive_ansible remain unchanged

@app.route('/run_playbook', methods=['POST'])
def run_playbook():
    global alive_hosts
    if not alive_hosts:
        return jsonify({"error": "No alive hosts to target"}), 400

    data = request.get_json()
    username = data.get("username")
    password = data.get("password")
    become_password = data.get("become_password")
    become_method = data.get("become_method", "sudo")

    if not all([username, password, become_password, become_method]):
        return jsonify({"error": "Missing credentials"}), 400

    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix=".ini") as inv_file:
        inv_file.write("[alive]\n")
        for ip, _ in alive_hosts:
            inv_file.write(f"{ip} ansible_user={username}\n")
        inventory_path = inv_file.name

    env = os.environ.copy()

    expect_script = f"""#!/usr/bin/expect -f
set timeout -1
spawn ansible-playbook site.yml -i {inventory_path} --ask-pass --ask-become-pass --become-method={become_method}
expect "SSH password:"
send "{password}\r"
expect "BECOME password:"
send "{become_password}\r"
expect eof
"""

    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix=".exp") as script_file:
        script_file.write(expect_script)
        script_path = script_file.name
    os.chmod(script_path, 0o700)

    try:
        result = subprocess.run(["expect", script_path], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        output = result.stdout
    except subprocess.CalledProcessError as e:
        output = e.stdout + "\n---\n" + str(e)

    os.unlink(inventory_path)
    os.unlink(script_path)
    return jsonify({"output": output})

if __name__ == '__main__':
    app.run(debug=True)
